"""empty message

Revision ID: 2fe55a43a334
Revises: 
Create Date: 2017-08-20 21:08:41.332553

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2fe55a43a334'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('schema_migrations')
    op.alter_column('followings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('followings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('index_followings_on_followed_id', table_name='followings')
    op.drop_index('index_followings_on_follower_id', table_name='followings')
    op.create_unique_constraint(None, 'followings', ['follower_id', 'followed_id'])
    op.create_foreign_key(None, 'followings', 'users', ['followed_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'followings', 'users', ['follower_id'], ['id'], ondelete='CASCADE')
    op.alter_column('likes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('likes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('index_likes_on_post_id', table_name='likes')
    op.create_unique_constraint(None, 'likes', ['post_id', 'user_id'])
    op.create_foreign_key(None, 'likes', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'likes', 'posts', ['post_id'], ['id'], ondelete='CASCADE')
    op.alter_column('notifications', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('notifications', 'from',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('notifications', 'notification_type',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('notifications', 'to',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('notifications', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('index_notifications_on_to_and_from_and_notification_type', table_name='notifications')
    op.alter_column('posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('posts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('index_posts_on_like_count', table_name='posts')
    op.drop_index('index_posts_on_user_id', table_name='posts')
    op.create_foreign_key(None, 'posts', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('index_sessions_on_user_id', table_name='sessions')
    op.create_foreign_key(None, 'sessions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('song_posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('song_posts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('index_song_posts_on_post_id', table_name='song_posts')
    op.drop_index('index_song_posts_on_song_id', table_name='song_posts')
    op.create_foreign_key(None, 'song_posts', 'songs', ['song_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'song_posts', 'posts', ['post_id'], ['id'], ondelete='CASCADE')
    op.alter_column('songs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('songs', 'spotify_url',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('songs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('spotify_creds', 'access_token',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('spotify_creds', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('spotify_creds', 'expires_at',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('spotify_creds', 'refresh_token',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('spotify_creds', 'spotify_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('spotify_creds', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('index_spotify_creds_on_user_id', table_name='spotify_creds')
    op.create_foreign_key(None, 'spotify_creds', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index('index_users_on_fbid', table_name='users')
    op.create_unique_constraint(None, 'users', ['fbid'])
    op.drop_column('users', 'remote_push_notifications_enabled')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('remote_push_notifications_enabled', sa.BOOLEAN(), server_default=sa.text(u'false'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index('index_users_on_fbid', 'users', ['fbid'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint(None, 'spotify_creds', type_='foreignkey')
    op.create_index('index_spotify_creds_on_user_id', 'spotify_creds', ['user_id'], unique=False)
    op.alter_column('spotify_creds', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('spotify_creds', 'spotify_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('spotify_creds', 'refresh_token',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('spotify_creds', 'expires_at',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('spotify_creds', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('spotify_creds', 'access_token',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('songs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('songs', 'spotify_url',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('songs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint(None, 'song_posts', type_='foreignkey')
    op.drop_constraint(None, 'song_posts', type_='foreignkey')
    op.create_index('index_song_posts_on_song_id', 'song_posts', ['song_id'], unique=False)
    op.create_index('index_song_posts_on_post_id', 'song_posts', ['post_id'], unique=False)
    op.alter_column('song_posts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('song_posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint(None, 'sessions', type_='foreignkey')
    op.create_index('index_sessions_on_user_id', 'sessions', ['user_id'], unique=False)
    op.alter_column('sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint(None, 'posts', type_='foreignkey')
    op.create_index('index_posts_on_user_id', 'posts', ['user_id'], unique=False)
    op.create_index('index_posts_on_like_count', 'posts', ['like_count'], unique=False)
    op.alter_column('posts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('posts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index('index_notifications_on_to_and_from_and_notification_type', 'notifications', ['to', 'from', 'notification_type'], unique=False)
    op.alter_column('notifications', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('notifications', 'to',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('notifications', 'notification_type',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('notifications', 'from',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('notifications', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint(None, 'likes', type_='foreignkey')
    op.drop_constraint(None, 'likes', type_='foreignkey')
    op.drop_constraint(None, 'likes', type_='unique')
    op.create_index('index_likes_on_post_id', 'likes', ['post_id'], unique=False)
    op.alter_column('likes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('likes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint(None, 'followings', type_='foreignkey')
    op.drop_constraint(None, 'followings', type_='foreignkey')
    op.drop_constraint(None, 'followings', type_='unique')
    op.create_index('index_followings_on_follower_id', 'followings', ['follower_id'], unique=False)
    op.create_index('index_followings_on_followed_id', 'followings', ['followed_id'], unique=False)
    op.alter_column('followings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('followings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_table('schema_migrations',
    sa.Column('version', sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    # ### end Alembic commands ###
