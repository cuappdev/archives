---
- name: Deploying Register
  gather_facts: False
  hosts: all
  remote_user: root
  become: true
  become_method: sudo
  environment:
    LC_ALL: en_US.UTF-8
    LANG: en_US.UTF-8
    LANGUAGE: en_US.UTF-8
  vars:
    repository_url: https://github.com/cuappdev/register.git
    repository_path: /home/vagrant/register
    DB_USERNAME: "{{ lookup('env', 'DB_USERNAME') }}"
    DB_PASSWORD: "{{ lookup('env', 'DB_PASSWORD') }}"
    DB_HOST: "{{ lookup('env', 'DB_HOST') }}"
    DB_NAME: "{{ lookup('env', 'DB_NAME') }}"
    APP_SETTINGS : "{{ lookup('env', 'APP_SETTINGS') }}"
  tasks:
  - name: Install necessary packages
    apt: update_cache=yes name={{ item }} state=present
    remote_user: root
    become: yes
    with_items:
      - libatlas-base-dev
      - gfortran
      - g++
      - build-essential
      - libssl-dev
      - libffi-dev
      - python-dev
      - python-pip
      - nginx
      - git
      - gridsite-clients
      - libpq-dev # postgres
      - mysql-server # mysql
      - libmysqlclient-dev # mysql
      - htop # sick process visualization from the command line
  - name: Set server timezone
    command: timedatectl set-timezone America/New_York
  - name: Check if directory exists
    stat: path='{{ repository_path }}'
    register: register_cloned
  - name: Pull application repo
    command: chdir='{{ repository_path }}' git pull origin master
    when: register_cloned.stat.exists
  - name: Clone application repo
    git: repo='{{ repository_url }}' dest='{{ repository_path }}'
    when: register_cloned.stat.exists == false
  - name: Install appdev-specific module
    command: pip install git+https://github.com/cuappdev/appdev.py.git#egg=appdev.py
  - name: Install pip requirements
    pip: requirements='{{ repository_path }}/requirements.txt'
  - name: Copy Upstart configuration
    template: src=upstart.conf.j2 dest=/etc/init/upstart.conf
  - name: Check if migration exists
    stat: path={{ repository_path }}/src/migrations
    register: migrations
  - name: Run initialization script for DB
    command: python manage.py db init
    environment:
      DB_USERNAME: '{{ DB_USERNAME }}'
      DB_PASSWORD: '{{ DB_PASSWORD }}'
      DB_NAME: '{{ DB_NAME }}'
      DB_HOST: '{{ DB_HOST }}'
      APP_SETTINGS: '{{ APP_SETTINGS }}'
    args:
      chdir: '{{ repository_path }}/src/'
    when: migrations.stat.exists == false
  - name: Run migrations script for DB
    command: sudo -E python setup_db.py
    environment:
      DB_USERNAME: '{{ DB_USERNAME }}'
      DB_PASSWORD: '{{ DB_PASSWORD }}'
      DB_NAME: '{{ DB_NAME }}'
      DB_HOST: '{{ DB_HOST }}'
      APP_SETTINGS: '{{ APP_SETTINGS }}'
    args:
      chdir: '{{ repository_path }}/src/scripts/'
  - name: Make sure our server is running
    service: name=upstart state=restarted
  - name: Copy Nginx site values
    template: src=register.nginx.j2 dest=/etc/nginx/sites-enabled/register
    notify:
      - restart nginx
  - name: Remove any default sites
    file: path=/etc/nginx/sites-enabled/default state=absent
    notify:
      - restart nginx
  - name: Make sure nginx is running
    service: name=nginx state=restarted
  handlers:
    - name: restart nginx
      service: name=nginx state=restarted
